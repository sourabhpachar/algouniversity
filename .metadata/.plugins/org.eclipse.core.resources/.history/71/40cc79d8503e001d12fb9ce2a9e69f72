package Array;

// i/p - abzaxf
// o/p-  aabfxz
//A1-> convert string to char array then either use Arrays.sort or any sorting algorithm T.C->nlogn
//A-2-> use counting sort(best for fix no of characters) T.C O(N+26)
import java.util.*;

public class sorting_string {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
     Scanner sc=new Scanner(System.in);
     String s=sc.next();
     //A1
//     char[] ss=s.toCharArray();
//     Arrays.sort(ss);
//     System.out.println(ss);
     //A2
//     int max=0;
//     char[] ss=s.toCharArray();
//for(int i=0;i<s.length();i++) {
//	 
//    	 if(ss[i]>max) {
//    		 //System.out.println(ss[i]);
//    		max=ss[i]; 
//    	 }
//    	 
//     }
//   int[]count=new int[max+1];
//   for(int i=0;i<ss.length;i++) {
//	   count[ss[i]]++;
//   }
//   for(int i=1;i<count.length;i++) {
//	   while(count[i]>0) {
//		   char a =(char)i;
//		   System.out.println(a);
//		   count[i]--;
//	   }
//   }
     //A3- in this we will only use size of count array as 26 we will achieve this by subtracting unicode of  a from all the letters
     //but this would be only applicable if we have all small letters as a to z and A TO Z have continous unicodes
    
     char[] ss=s.toCharArray();
     int [] count=new int[26];
     for(int i=0;i<ss.length;i++) {
    	 count[ss[i]-'a']++;
    	 
     }
     for (int i=0;i<26;i++) {
    	 while(count[i]>0) {
    		 System.out.println('a'+i);
    		 count[i]--;
    	 }
     }
	}
}
